name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: |
          cargo build \
            --release \
            --target ${{ matrix.target }} \
            --locked
        env:
          RUSTFLAGS: "-C strip=symbols -C opt-level=z -C lto=fat -C codegen-units=1 -C panic=abort"

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p artifacts
          binary_name="sketch${{ matrix.binary_suffix }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/${binary_name}" "artifacts/sketch-${{ matrix.target }}${binary_suffix}"
          else
            cp "target/${{ matrix.target }}/release/sketch" "artifacts/sketch-${{ matrix.target }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sketch-${{ matrix.target }}
          path: artifacts/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              target=$(basename "$dir" | sed 's/sketch-//')
              cd "$dir"
              if ls sketch-* 1> /dev/null 2>&1; then
                for file in sketch-*; do
                  if [[ "$file" == *.exe ]]; then
                    zip "../../release-assets/sketch-${target}.zip" "$file"
                  else
                    tar -czf "../../release-assets/sketch-${target}.tar.gz" "$file"
                  fi
                done
              fi
              cd - > /dev/null
            fi
          done

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Features" >> $GITHUB_OUTPUT
          echo "- Multithreaded web scraper with configurable batching" >> $GITHUB_OUTPUT
          echo "- Cross-platform support (Linux, macOS, Windows)" >> $GITHUB_OUTPUT
          echo "- Optimized binary size with stripped symbols" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Downloads" >> $GITHUB_OUTPUT
          echo "- **Linux (glibc)**: \`sketch-x86_64-unknown-linux-gnu.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **Linux (musl)**: \`sketch-x86_64-unknown-linux-musl.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **macOS (Intel)**: \`sketch-x86_64-apple-darwin.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **macOS (Apple Silicon)**: \`sketch-aarch64-apple-darwin.tar.gz\`" >> $GITHUB_OUTPUT
          echo "- **Windows**: \`sketch-x86_64-pc-windows-msvc.zip\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}