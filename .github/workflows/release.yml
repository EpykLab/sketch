name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Verify target installation
        run: |
          echo "Installed targets:"
          rustup target list --installed
          echo "Checking for target: ${{ matrix.target }}"
          rustup target list --installed | grep ${{ matrix.target }} || (echo "Target not found, attempting to install manually" && rustup target add ${{ matrix.target }})

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          echo "Building for target: ${{ matrix.target }}"
          rustup show
          cargo build --release --target ${{ matrix.target }} --verbose
        env:
          CARGO_TERM_COLOR: always

      - name: Package binary (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../sketch-${{ matrix.target }}.tar.gz sketch
          cd ../../..
          ls -la sketch-${{ matrix.target }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sketch-${{ matrix.target }}
          path: sketch-${{ matrix.target }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Sketch ${{ steps.version.outputs.VERSION }}
            
            A fast, multithreaded web scraper that crawls same-domain pages and outputs content as Markdown.
            
            ### Features
            - üöÄ Multithreaded with configurable batch processing
            - üåê Cross-platform support
            - ‚ö° Async I/O for maximum performance
            - üéØ Same-domain crawling with intelligent link extraction
            - üìù Clean Markdown output with embedded HTML
            
            ### Downloads
            Choose the appropriate binary for your platform:
            
            - **Linux**: `sketch-x86_64-unknown-linux-gnu.tar.gz`
            - **macOS (Intel)**: `sketch-x86_64-apple-darwin.tar.gz`
            - **macOS (Apple Silicon)**: `sketch-aarch64-apple-darwin.tar.gz`
            
            ### Usage
            ```bash
            # Basic usage
            sketch https://example.com
            
            # With custom options
            sketch --batch-size 20 --max-pages 100 https://example.com
            ```
          draft: false
          prerelease: false
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}